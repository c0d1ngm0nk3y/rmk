template#item-template
  li.browser-default
    div(v-on:click="toggle" v-bind:class="{ error: node.exception, ok: !node.exception}" )
      span(v-bind:class="{bold: isFolder}" style ="font-size: 150%") {{ node.name }} 
      span(style ="padding-left: 10px; font-size: 80%") {{ node.dir }}
      span(v-if="isFolder" ) [ {{ isOpen ? '-' : '+' }} ]
    ul.browser-default(v-if="isFolder" v-show="isOpen")
      tree-item(class="item" v-for="(child, index) in node.depends" :key="index" :node="graph[child]" :graph="graph" )
div
  #build
    ul
      tree-item(class="item" :graph="graph" :node="graph['root']")
    div.terminal(v-if="node.exception" v-cloak="")
      .error() {{ node.exception }}
    h5 Logs
    div#scroll(style="overflow-y: scroll; height:400px;")
      table.terminal.code
        thead
        tbody.code
          tr(is="log-item" v-for="log in logs" v-bind:log="log" )

javascript:
  var graph = #{{@build.graph.to_json}}
  Vue.component('tree-item', {
    template: '#item-template',
    props: {
      node: Object,
      graph: Object
    },
    data: function () {
      return {
        isOpen: false
      }
    },
    computed: {
      isFolder: function () {
        return this.node.depends.length
      }
    },
    methods: {
      toggle: function () {
        if (this.isFolder) {
          this.isOpen = !this.isOpen
        }
      },
    }
  })
  Vue.component('log-item', {
    props: ['log'],
    template: '<tr class="code"><td class="time code">{{log.time}}</td><td class="code" v-bind:class="{error: log.channel == \'error\' }">{{ log.message }}</td></tr>'
  });
  var app = new Vue({
    el: '#build',
    data: {
      url: "#{url('/build/' + @build.id)}",
      logs: #{{@build.logs.to_json}},
      node: graph['root'],
      graph: graph
    },
    computed: {
      name: function () {
        return node.name
      },
      dir: function () {
        return node.dir
      },
      exception: function () {
        return node.exception
      }
    },
    methods: {
      scrollBottom: function() {
        let scroll = document.getElementById("scroll")
        if ( scroll.scrollHeight - scroll.scrollTop < 500 ) {
          scroll.scrollTop = scroll.scrollHeight;
        }
      }
    },
    created: function () {
      let self = this;
      new EventSource(self.url + '/log/stream').onmessage = function(e) {
        self.logs.push(JSON.parse(e.data));
      }
      new EventSource("#{url('/status')}").onmessage = function(e) {
        if ( e.data == "finished" ) {
          fetch(self.url).then((response) => {
            return response.json().then((json) => {
              self.graph = json
              self.node = json['root']
            })
          })
        }
      }
    },
    updated: function () {
      this.scrollBottom()
    }
  })
